plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'groovy'
}

bootJar {
	enabled = false
}

jar {
	enabled = true
}

repositories {
	maven { url "https://plugins.gradle.org/m2/" }
}

subprojects {
	group = 'com.exercise'
	version = '0.0.1-SNAPSHOT'

	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'groovy'

	buildscript {
		ext {
			springBootVersion = '3.0.0'
			springDependencyManagement = '1.1.0'
			spockVersion = '2.3-groovy-4.0'

			encoding = 'UTF-8'
			compatibility = '17'
		}

		repositories {
			mavenCentral()
		}

		configurations {
			compileOnly {
				extendsFrom annotationProcessor
			}
		}

		dependencies{
			classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
			classpath("io.spring.gradle:dependency-management-plugin:${springDependencyManagement}")
		}
	}

	repositories {
		mavenCentral()
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-webflux'
		implementation 'org.flywaydb:flyway-core'
		implementation 'org.flywaydb:flyway-mysql'
		implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.0'
		implementation group: 'io.netty', name: 'netty-resolver-dns-native-macos', version: '4.1.85.Final'
		compileOnly 'org.projectlombok:lombok'
		compileOnly 'org.springframework.retry:spring-retry'
		runtimeOnly 'com.mysql:mysql-connector-j'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.testcontainers:mysql:1.17.6'
		testImplementation("org.spockframework:spock-core:${spockVersion}")
		testImplementation("org.spockframework:spock-spring:${spockVersion}")
	}

	dependencyManagement {
		imports {
			mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
		}
	}

	sourceCompatibility = compatibility
	targetCompatibility = compatibility

	tasks.withType(AbstractCompile) each { it.options.encoding = encoding }
	tasks.withType(GroovyCompile) each { it.groovyOptions.encoding = encoding }

	tasks.named('test') {
		useJUnitPlatform()
	}
}
